@model Your_Ride.ViewModels.BookViewModel.BookVM

@{
    ViewData["Title"] = "Edit Booking";
    var availableTimes = ViewBag.AvaiableTimes as List<Your_Ride.ViewModels.TimeViewModel.TimeVM>;
}

<h2>✏ Edit Your Booking</h2>

<form asp-action="EditBook" method="post">
    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="UserID" />
    <input type="hidden" asp-for="timeId" />
    <input type="hidden" asp-for="SeatId" />


    <input type="hidden" id="selectedTimeId" name="NewTimeId" />
    <input type="hidden" id="transactionLogId" name="UserTransactionLogID" value="@ViewBag.UserTransactionLogID" />

    <div class="form-group">
        <label>🔑 Transaction Log ID:</label>
        <input type="text" class="form-control" value="@ViewBag.UserTransactionLogID" readonly>
    </div>

    <div class="form-group">
        <label>🕒 Current Time:</label>
        <input type="text" class="form-control" value="@Model.Time.TimeOnly.ToString("hh:mm tt")" readonly>
    </div>

    <div class="form-group">
        <label>💺 Seat:</label>
        <input type="text" class="form-control" value="@Model.Seat.SeatLabel" readonly>
    </div>

    <div class="form-group">
        <label>💰 Fee:</label>
        <input type="text" class="form-control" value="$@Model.Time.Fee" readonly>
    </div>

    <h3>📅 Select a New Available Time:</h3>
    <div id="calendar"></div>

    <div id="timeDetails" class="hidden">
        <h4>Selected Time Details</h4>
        <p>🕒 Time: <span id="previewTime"></span></p>
        <p>💰 Fee: <span id="previewFee"></span></p>
        <p>📍 Location: <span id="previewLocation"></span></p>
        <p>📌 Order: <span id="previewLocationOrder"></span></p>
        <div id="previewImages"></div>
    </div>

    <button type="submit" class="btn btn-primary">💾 Save Changes</button>
</form>
<a href="/Book/GetAllAvailableTimesToBook" class="btn btn-secondary">🔙 Back to Calendar</a>


@if (availableTimes == null || !availableTimes.Any())
{
    <p>No available times found.</p>
}

<!-- Load FullCalendar -->
<link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var calendarEl = document.getElementById('calendar');

    var eventsArray = @Html.Raw(Json.Serialize(availableTimes?.Select(time => new
        {
            id = time.Id,
            title = $"🚌{time.TimeOnly:hh:mm tt}-{time.Category}",
            start = time.Appointment != null
                ? time.Appointment.Date.ToString("yyyy-MM-dd") + "T00:00:00"  // ✅ Corrected C# formatting
                : DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss"), // Fallback
            fee = time.Fee,
            location = time.LocationImages?.OrderBy(l => l.LocationOrder).FirstOrDefault()?.Location ?? "Unknown",
            locationOrder = time.LocationImages?.OrderBy(l => l.LocationOrder).FirstOrDefault()?.LocationOrder ?? 0,
            images = time.LocationImages?.Select(img => img.ImagePath)
        })));



        console.log("Events Array JSON:", JSON.stringify(eventsArray, null, 2)); // Debugging

        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            events: eventsArray,
            eventClick: function(info) {
                console.log("Clicked Event:", info.event);
                // alert("You clicked: " + info.event.title); // Debugging

                document.getElementById("selectedTimeId").value = info.event.id;
                document.getElementById("previewTime").innerText = info.event.title;
                document.getElementById("previewFee").innerText = "$" + info.event.extendedProps.fee;
                document.getElementById("previewLocation").innerText = info.event.extendedProps.location;
                document.getElementById("previewLocationOrder").innerText = info.event.extendedProps.locationOrder;

                var imagesContainer = document.getElementById("previewImages");
                imagesContainer.innerHTML = "";
                if (info.event.extendedProps.images.length > 0) {
                    info.event.extendedProps.images.forEach(function(imgSrc) {
                        var img = document.createElement("img");
                        img.src = imgSrc;
                        img.style.width = "100px";
                        img.style.margin = "5px";
                        imagesContainer.appendChild(img);
                    });
                }

                document.getElementById("timeDetails").classList.remove("hidden");
            },
            eventDidMount: function(info) {
                console.log("Rendered Event:", info.event);
            }
        });

        calendar.render();

        setTimeout(() => {
            console.log("Loaded Events:", calendar.getEvents());
        }, 3000);
    });
</script>

<style>
    #timeDetails {
        background: #f8f9fa;
        padding: 10px;
        margin-top: 10px;
        border-radius: 5px;
    }

    .hidden {
        display: none;
    }

    #previewImages img {
        border: 2px solid #ddd;
        border-radius: 5px;
        padding: 5px;
        background: #fff;
    }
</style>
